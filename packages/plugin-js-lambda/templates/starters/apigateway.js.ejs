const AWS = require('aws-sdk');
<% var parseRoute = (k, v, regexMode = false) => {
    v = {route: k, private: false, config: {}, options: {}, handler: 'unknown', method: k.split(' ').shift().toUpperCase(), ...('string' === typeof v ? {handler: v} : v)};
    if (!v.code || ((v.code < 200) || (v.code >= 600))) {
        switch (v.method) {
            case 'GET': v.code = 200; break;
            case 'POST': v.code = 201; break;
            case 'DELETE': v.code = 204; break;
            case 'PUT': v.code = 200; break;
            case 'OPTIONS': v.code = 204; break;
            default: v.code = 200; break;
        }
    }
    if ('<private>' === v.handler.slice(0, '<private>'.length)) {
        v.handler = v.handler.slice('<private>'.length);
        v.private = true;
    }
    if (false !== v.private) v.options.private = v.private;
    delete v.private;
    if (0 === Object.keys(v.config).length) delete v.config;
    if (0 === Object.keys(v.options).length) delete v.options;
    if (!regexMode) {
        v.route = `'${v.route}'`;
    } else {
        v.route = `!!(x=m(a,'${k}'))`;
        v.config = 'x'
    }
    return v;
} -%>
<% ('undefined' !== typeof healthz) && healthz && (routes['GET /healthz'] = '@healthz') -%>
<% var regexMode = (('undefined' !== typeof regex_mode) && !!regex_mode); -%>
<% var len = Object.keys(routes).reduce((acc, r) => (r.length + (regexMode ? 13 : 2)) > acc ? (r.length + (regexMode ? 13 : 2)) : acc, 0); -%>
<% if (regexMode) { %>const m = (aa, bb) => {
    const [p, y = undefined] = aa.path.split('?');
    const q = {};
    for (const [k, v] of new URLSearchParams(`?${y || ''}`).entries()) {
        q[k] = v;
    }
    const [xx, yy] = bb.split(' ');
    if (xx !== aa.method) return undefined;
    const Path = require('path-parser').Path;
    const r = new Path(yy).test(p) || undefined;
    return !!r ? {...q, ...r} : undefined;
}; <% } %>
const fnm = async (a, b) => {
<% if (regexMode) { %>    let x;
<% } -%>
    switch (<%- regexMode ? 'true' : '`${a.method} ${a.path}`' -%>) {
<% var sortedRoutes = Object.entries(routes).map(([k, v]) => parseRoute(k, v, regexMode)) -%>
<% sortedRoutes.sort((a, b) => a.route > b.route ? 1 : (a.route < b.route ? -1 : 0)) -%>
<% sortedRoutes.forEach(r => { -%>
        case <%- r.route -%>: <%- ''.padStart(len - r.route.length, ' ') %>return r(a, b, <%- r.code -%>, '<%- r.handler -%>'<% if (r.options || r.config) { %>, <%- r.options ? JSON.stringify(r.options) : '{}' -%><% if (r.config) { %>, <%- 'string' === typeof r.config ? r.config : JSON.stringify(r.config) -%><% } %><% } %>);
<% }) -%>
        default: <%- ''.padStart(len - 'default'.length + (5 + (regexMode ? 4 : 0)), ' ') %>return r(a, b, 404, '@not-found');
    }
};

<% var middlewares = [] -%>
<% var errorMiddlewares = ['@generic'] -%>
<% var middlewaresConfigs = {} -%>
<% var errorMiddlewaresConfigs = {} -%>
<% var errorConfig = ((('undefined' !== typeof errors) && errors) ? errors : undefined) || {} -%>
<% Object.keys(errorConfig).length && (errorMiddlewaresConfigs['@generic'] = {mapping: errorConfig}) -%>
<% 'undefined' !== typeof jwt && jwt && middlewares.push('@jwt') -%>
<% 'undefined' !== typeof cors && cors && middlewares.push('@cors') -%>
<% middlewares.push(':fnm') -%>
<%- pre_init({middlewares, errorMiddlewares, middlewaresConfigs, errorMiddlewaresConfigs}) %>
<%- post_init({fn: false}) %>

const r = async (req, res, statusCode, n, o = {}, p = {}) => {
    const h = require(('@' === n.slice(0, 1))
        ? ((0 < n.indexOf('/')) ? n : `@ohoareau/microlib/lib/handlers/${n.slice(1)}`)
        : `.<%- ('undefined' === typeof operationDirectory) ? '' : `/${operationDirectory}` -%>/<%- 'undefined' !== typeof prefix ? `${prefix}_` : '' -%>${n}`
    );
    const x = await (h.handler || h.default)(
        {...req, bodyOnly: false, params: {...(req.params || {}), ...p}, private: o.private},
        {...req.context}
    );
    const z = (x && (x.statusCode || x.body)) ? x : {body: x};
    return Object.assign(res, {statusCode, headers: {...res.headers, ...(z.headers || {})}, body: z.body});
};

const server = require('http').createServer();

const serialize = x => {
    if (!!x && ('object' === typeof x)) {
        x = x.serialize ? x.serialize() : (x instanceof Error ? {errorType: 'error', message: e.message} : x);
    }
    return JSON.stringify(x);
}

server.on('request', async (req, res) => {
    return new Promise((resolve) => {
        Object.assign(req, {path: req.url, bodyOnly: false});
        const finalize = response => {
            Object.entries(response.headers || {}).forEach(([k, v]) => res.setHeader(k, v));
            res.setHeader('Content-Type', 'application/json; charset=UTF-8');
            res.write(serialize(response.body));
            res.end();
        };
        let data = []
        req
            .on('data', d => { data.push(d) })
            .on('end', () => {
                data = Buffer.concat(data).toString();
                !!data && (req.params = {data: JSON.parse(data)});
                fnm(req, res)
                    .then(response => { finalize(response); resolve(); })
                    .catch(e => { finalize({headers: {'Content-Type': 'application/json; charset=UTF-8'}, body: e}); resolve(); })
        });
    });
});
const port = process.env.PORT || 8080;
server.listen(port, error => {
    const url = `http://localhost:${port}`;
    console.log(`ðŸš€ REST Server ready at ${url} (AWS region is ${AWS.config.region})`);
});
